import * as core from "@actions/core";
import * as github from "@actions/github";
import * as fs from "fs";
import * as path from "path";

interface CoverageSummary {
  summary: {
    statements: number;
    branches: number;
    functions: number;
    lines: number;
  };
  files: Array<{
    file: string;
    statements: number;
    branches: number;
    functions: number;
    lines: number;
    uncoveredLines: number[];
  }>;
}

function getCoverageEmoji(percentage: number, threshold: number): string {
  if (percentage >= threshold) return "🟢";
  if (percentage >= threshold * 0.8) return "🟡";
  return "🔴";
}

function formatPercentage(value: number): string {
  return `${value.toFixed(1)}%`;
}

function generateCoverageComment(
  coverage: CoverageSummary,
  title: string,
  showFiles: boolean,
  threshold: number
): string {
  const { summary, files } = coverage;

  let comment = `## ${title}\n\n`;

  // Summary section
  comment += "### 📈 Coverage Summary\n\n";
  comment += "| Metric | Coverage | Status |\n";
  comment += "|--------|----------|--------|\n";
  comment += `| **Statements** | ${formatPercentage(
    summary.statements
  )} | ${getCoverageEmoji(summary.statements, threshold)} |\n`;
  comment += `| **Branches** | ${formatPercentage(
    summary.branches
  )} | ${getCoverageEmoji(summary.branches, threshold)} |\n`;
  comment += `| **Functions** | ${formatPercentage(
    summary.functions
  )} | ${getCoverageEmoji(summary.functions, threshold)} |\n`;
  comment += `| **Lines** | ${formatPercentage(
    summary.lines
  )} | ${getCoverageEmoji(summary.lines, threshold)} |\n\n`;

  // Overall status
  const avgCoverage =
    (summary.statements +
      summary.branches +
      summary.functions +
      summary.lines) /
    4;
  const overallEmoji = getCoverageEmoji(avgCoverage, threshold);
  comment += `**Overall Coverage: ${formatPercentage(
    avgCoverage
  )} ${overallEmoji}**\n\n`;

  if (showFiles && files.length > 0) {
    comment += "### 📁 File Details\n\n";
    comment += "| File | Statements | Branches | Functions | Lines |\n";
    comment += "|------|------------|----------|-----------|-------|\n";

    files.forEach((file) => {
      const filePath = file.file
        .replace(process.cwd(), "")
        .replace(/^[\/\\]/, "");
      comment += `| \`${filePath}\` | ${formatPercentage(
        file.statements
      )} | ${formatPercentage(file.branches)} | ${formatPercentage(
        file.functions
      )} | ${formatPercentage(file.lines)} |\n`;
    });
  }

  comment +=
    "\n---\n*Generated by [@glideapps/vitest-coverage-tools](https://github.com/glideapps/vitest-coverage-tools)*";

  return comment;
}

async function run(): Promise<void> {
  try {
    const coverageFile =
      core.getInput("coverage-file", { required: false }) ||
      "coverage/coverage-summary.json";
    const token =
      core.getInput("token", { required: false }) || process.env.GITHUB_TOKEN;
    const title =
      core.getInput("title", { required: false }) || "📊 Coverage Report";
    const showFiles =
      core.getInput("show-files", { required: false }) === "true";
    const threshold = parseInt(
      core.getInput("coverage-threshold", { required: false }) || "80",
      10
    );

    if (!token) {
      core.setFailed("GitHub token is required");
      return;
    }

    // Check if we're in a pull request
    const context = github.context;
    if (context.eventName !== "pull_request") {
      core.info("Not a pull request, skipping coverage comment");
      return;
    }

    // Read coverage file
    const coverageFilePath = path.resolve(coverageFile);
    if (!fs.existsSync(coverageFilePath)) {
      core.setFailed(
        `coverage-summary.json file not found at path ${coverageFilePath}. Did you forget to add the reporter in your vitest.config.js?`
      );
      return;
    }

    const coverageData = JSON.parse(
      fs.readFileSync(coverageFilePath, "utf8")
    ) as CoverageSummary;

    // Generate comment
    const comment = generateCoverageComment(
      coverageData,
      title,
      showFiles,
      threshold
    );

    // Create GitHub client
    const octokit = github.getOctokit(token);

    // Find existing comment
    const { data: comments } = await octokit.rest.issues.listComments({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: context.issue.number,
    });

    const existingComment = comments.find(
      (comment: any) =>
        comment.user?.type === "Bot" &&
        comment.body?.includes(
          "Generated by [@glideapps/vitest-coverage-tools]"
        )
    );

    if (existingComment) {
      // Update existing comment
      await octokit.rest.issues.updateComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        comment_id: existingComment.id,
        body: comment,
      });
      core.info("Updated existing coverage comment");
    } else {
      // Create new comment
      await octokit.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
        body: comment,
      });
      core.info("Created new coverage comment");
    }
  } catch (error) {
    core.setFailed(
      error instanceof Error ? error.message : "Unknown error occurred"
    );
  }
}

run();
